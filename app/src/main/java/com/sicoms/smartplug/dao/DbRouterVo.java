package com.sicoms.smartplug.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_router.
 */
public class DbRouterVo {

    private String routerIp;
    /** Not-null value. */
    private String ssId;
    /** Not-null value. */
    private String password;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbRouterVoDao myDao;

    private DbPlugVo dbPlugVo;
    private String dbPlugVo__resolvedKey;


    public DbRouterVo() {
    }

    public DbRouterVo(String routerIp) {
        this.routerIp = routerIp;
    }

    public DbRouterVo(String routerIp, String ssId, String password) {
        this.routerIp = routerIp;
        this.ssId = ssId;
        this.password = password;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbRouterVoDao() : null;
    }

    public String getRouterIp() {
        return routerIp;
    }

    public void setRouterIp(String routerIp) {
        this.routerIp = routerIp;
    }

    /** Not-null value. */
    public String getSsId() {
        return ssId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSsId(String ssId) {
        this.ssId = ssId;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    /** To-one relationship, resolved on first access. */
    public DbPlugVo getDbPlugVo() {
        String __key = this.routerIp;
        if (dbPlugVo__resolvedKey == null || dbPlugVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlugVoDao targetDao = daoSession.getDbPlugVoDao();
            DbPlugVo dbPlugVoNew = targetDao.load(__key);
            synchronized (this) {
                dbPlugVo = dbPlugVoNew;
            	dbPlugVo__resolvedKey = __key;
            }
        }
        return dbPlugVo;
    }

    public void setDbPlugVo(DbPlugVo dbPlugVo) {
        synchronized (this) {
            this.dbPlugVo = dbPlugVo;
            routerIp = dbPlugVo == null ? null : dbPlugVo.getPlugId();
            dbPlugVo__resolvedKey = routerIp;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package com.sicoms.smartplug.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_place.
*/
public class DbPlaceVoDao extends AbstractDao<DbPlaceVo, String> {

    public static final String TABLENAME = "tb_place";

    /**
     * Properties of entity DbPlaceVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlaceId = new Property(0, String.class, "placeId", true, "PLACE_ID");
        public final static Property PlaceName = new Property(1, String.class, "placeName", false, "PLACE_NAME");
        public final static Property PlaceImg = new Property(2, String.class, "placeImg", false, "PLACE_IMG");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Coordinate = new Property(4, String.class, "coordinate", false, "COORDINATE");
        public final static Property Auth = new Property(5, String.class, "auth", false, "AUTH");
        public final static Property PlugCount = new Property(6, Integer.class, "plugCount", false, "PLUG_COUNT");
        public final static Property MemberCount = new Property(7, Integer.class, "memberCount", false, "MEMBER_COUNT");
    }

    private DaoSession daoSession;


    public DbPlaceVoDao(DaoConfig config) {
        super(config);
    }
    
    public DbPlaceVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_place' (" + //
                "'PLACE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: placeId
                "'PLACE_NAME' TEXT NOT NULL ," + // 1: placeName
                "'PLACE_IMG' TEXT," + // 2: placeImg
                "'ADDRESS' TEXT," + // 3: address
                "'COORDINATE' TEXT," + // 4: coordinate
                "'AUTH' TEXT," + // 5: auth
                "'PLUG_COUNT' INTEGER," + // 6: plugCount
                "'MEMBER_COUNT' INTEGER);"); // 7: memberCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_place'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbPlaceVo entity) {
        stmt.clearBindings();
 
        String placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindString(1, placeId);
        }
        stmt.bindString(2, entity.getPlaceName());
 
        String placeImg = entity.getPlaceImg();
        if (placeImg != null) {
            stmt.bindString(3, placeImg);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        String coordinate = entity.getCoordinate();
        if (coordinate != null) {
            stmt.bindString(5, coordinate);
        }
 
        String auth = entity.getAuth();
        if (auth != null) {
            stmt.bindString(6, auth);
        }
 
        Integer plugCount = entity.getPlugCount();
        if (plugCount != null) {
            stmt.bindLong(7, plugCount);
        }
 
        Integer memberCount = entity.getMemberCount();
        if (memberCount != null) {
            stmt.bindLong(8, memberCount);
        }
    }

    @Override
    protected void attachEntity(DbPlaceVo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbPlaceVo readEntity(Cursor cursor, int offset) {
        DbPlaceVo entity = new DbPlaceVo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // placeId
            cursor.getString(offset + 1), // placeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // placeImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coordinate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // auth
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // plugCount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // memberCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbPlaceVo entity, int offset) {
        entity.setPlaceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPlaceName(cursor.getString(offset + 1));
        entity.setPlaceImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoordinate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlugCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMemberCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbPlaceVo entity, long rowId) {
        return entity.getPlaceId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbPlaceVo entity) {
        if(entity != null) {
            return entity.getPlaceId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.sicoms.smartplug.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_group_user_mapping.
*/
public class DbGroupUserMappingVoDao extends AbstractDao<DbGroupUserMappingVo, Long> {

    public static final String TABLENAME = "tb_group_user_mapping";

    /**
     * Properties of entity DbGroupUserMappingVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupId = new Property(1, long.class, "groupId", false, "GROUP_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Auth = new Property(3, String.class, "auth", false, "AUTH");
    }

    private DaoSession daoSession;


    public DbGroupUserMappingVoDao(DaoConfig config) {
        super(config);
    }
    
    public DbGroupUserMappingVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_group_user_mapping' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GROUP_ID' INTEGER NOT NULL ," + // 1: groupId
                "'USER_ID' TEXT NOT NULL ," + // 2: userId
                "'AUTH' TEXT NOT NULL );"); // 3: auth
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tb_group_user_mapping_GROUP_ID_USER_ID ON tb_group_user_mapping" +
                " (GROUP_ID,USER_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_group_user_mapping'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbGroupUserMappingVo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGroupId());
        stmt.bindString(3, entity.getUserId());
        stmt.bindString(4, entity.getAuth());
    }

    @Override
    protected void attachEntity(DbGroupUserMappingVo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbGroupUserMappingVo readEntity(Cursor cursor, int offset) {
        DbGroupUserMappingVo entity = new DbGroupUserMappingVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // groupId
            cursor.getString(offset + 2), // userId
            cursor.getString(offset + 3) // auth
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbGroupUserMappingVo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.getLong(offset + 1));
        entity.setUserId(cursor.getString(offset + 2));
        entity.setAuth(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbGroupUserMappingVo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbGroupUserMappingVo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbGroupVoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDbUserVoDao().getAllColumns());
            builder.append(" FROM tb_group_user_mapping T");
            builder.append(" LEFT JOIN tb_group T0 ON T.'GROUP_ID'=T0.'GROUP_ID'");
            builder.append(" LEFT JOIN tb_user T1 ON T.'USER_ID'=T1.'USER_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbGroupUserMappingVo loadCurrentDeep(Cursor cursor, boolean lock) {
        DbGroupUserMappingVo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbGroupVo dbGroupVo = loadCurrentOther(daoSession.getDbGroupVoDao(), cursor, offset);
         if(dbGroupVo != null) {
            entity.setDbGroupVo(dbGroupVo);
        }
        offset += daoSession.getDbGroupVoDao().getAllColumns().length;

        DbUserVo dbUserVo = loadCurrentOther(daoSession.getDbUserVoDao(), cursor, offset);
         if(dbUserVo != null) {
            entity.setDbUserVo(dbUserVo);
        }

        return entity;    
    }

    public DbGroupUserMappingVo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbGroupUserMappingVo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbGroupUserMappingVo> list = new ArrayList<DbGroupUserMappingVo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbGroupUserMappingVo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbGroupUserMappingVo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

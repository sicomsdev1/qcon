package com.sicoms.smartplug.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 29): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 29;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        DbSettingVoDao.createTable(db, ifNotExists);
        DbPhoneVoDao.createTable(db, ifNotExists);
        DbGroupVoDao.createTable(db, ifNotExists);
        DbGroupSettingVoDao.createTable(db, ifNotExists);
        DbPlaceVoDao.createTable(db, ifNotExists);
        DbPlaceSettingVoDao.createTable(db, ifNotExists);
        DbUserVoDao.createTable(db, ifNotExists);
        DbPlugVoDao.createTable(db, ifNotExists);
        DbLastDataVoDao.createTable(db, ifNotExists);
        DbCutOffVoDao.createTable(db, ifNotExists);
        DbScheduleVoDao.createTable(db, ifNotExists);
        DbApVoDao.createTable(db, ifNotExists);
        DbRouterVoDao.createTable(db, ifNotExists);
        DbGatewayVoDao.createTable(db, ifNotExists);
        DbBluetoothVoDao.createTable(db, ifNotExists);
        DbGroupPlugMappingVoDao.createTable(db, ifNotExists);
        DbGroupUserMappingVoDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        DbSettingVoDao.dropTable(db, ifExists);
        DbPhoneVoDao.dropTable(db, ifExists);
        DbGroupVoDao.dropTable(db, ifExists);
        DbGroupSettingVoDao.dropTable(db, ifExists);
        DbPlaceVoDao.dropTable(db, ifExists);
        DbPlaceSettingVoDao.dropTable(db, ifExists);
        DbUserVoDao.dropTable(db, ifExists);
        DbPlugVoDao.dropTable(db, ifExists);
        DbLastDataVoDao.dropTable(db, ifExists);
        DbCutOffVoDao.dropTable(db, ifExists);
        DbScheduleVoDao.dropTable(db, ifExists);
        DbApVoDao.dropTable(db, ifExists);
        DbRouterVoDao.dropTable(db, ifExists);
        DbGatewayVoDao.dropTable(db, ifExists);
        DbBluetoothVoDao.dropTable(db, ifExists);
        DbGroupPlugMappingVoDao.dropTable(db, ifExists);
        DbGroupUserMappingVoDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DbSettingVoDao.class);
        registerDaoClass(DbPhoneVoDao.class);
        registerDaoClass(DbGroupVoDao.class);
        registerDaoClass(DbGroupSettingVoDao.class);
        registerDaoClass(DbPlaceVoDao.class);
        registerDaoClass(DbPlaceSettingVoDao.class);
        registerDaoClass(DbUserVoDao.class);
        registerDaoClass(DbPlugVoDao.class);
        registerDaoClass(DbLastDataVoDao.class);
        registerDaoClass(DbCutOffVoDao.class);
        registerDaoClass(DbScheduleVoDao.class);
        registerDaoClass(DbApVoDao.class);
        registerDaoClass(DbRouterVoDao.class);
        registerDaoClass(DbGatewayVoDao.class);
        registerDaoClass(DbBluetoothVoDao.class);
        registerDaoClass(DbGroupPlugMappingVoDao.class);
        registerDaoClass(DbGroupUserMappingVoDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}

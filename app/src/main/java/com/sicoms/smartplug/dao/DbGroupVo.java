package com.sicoms.smartplug.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_group.
 */
public class DbGroupVo {

    private String placeId;
    private Long groupId;
    /** Not-null value. */
    private String groupName;
    /** Not-null value. */
    private String superId;
    private String groupImg;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbGroupVoDao myDao;

    private DbPlaceVo dbPlaceVo;
    private String dbPlaceVo__resolvedKey;

    private List<DbGroupSettingVo> groupSettingList;

    public DbGroupVo() {
    }

    public DbGroupVo(Long groupId) {
        this.groupId = groupId;
    }

    public DbGroupVo(String placeId, Long groupId, String groupName, String superId, String groupImg) {
        this.placeId = placeId;
        this.groupId = groupId;
        this.groupName = groupName;
        this.superId = superId;
        this.groupImg = groupImg;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbGroupVoDao() : null;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    public Long getGroupId() {
        return groupId;
    }

    public void setGroupId(Long groupId) {
        this.groupId = groupId;
    }

    /** Not-null value. */
    public String getGroupName() {
        return groupName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    /** Not-null value. */
    public String getSuperId() {
        return superId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSuperId(String superId) {
        this.superId = superId;
    }

    public String getGroupImg() {
        return groupImg;
    }

    public void setGroupImg(String groupImg) {
        this.groupImg = groupImg;
    }

    /** To-one relationship, resolved on first access. */
    public DbPlaceVo getDbPlaceVo() {
        String __key = this.placeId;
        if (dbPlaceVo__resolvedKey == null || dbPlaceVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlaceVoDao targetDao = daoSession.getDbPlaceVoDao();
            DbPlaceVo dbPlaceVoNew = targetDao.load(__key);
            synchronized (this) {
                dbPlaceVo = dbPlaceVoNew;
            	dbPlaceVo__resolvedKey = __key;
            }
        }
        return dbPlaceVo;
    }

    public void setDbPlaceVo(DbPlaceVo dbPlaceVo) {
        synchronized (this) {
            this.dbPlaceVo = dbPlaceVo;
            placeId = dbPlaceVo == null ? null : dbPlaceVo.getPlaceId();
            dbPlaceVo__resolvedKey = placeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbGroupSettingVo> getGroupSettingList() {
        if (groupSettingList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbGroupSettingVoDao targetDao = daoSession.getDbGroupSettingVoDao();
            List<DbGroupSettingVo> groupSettingListNew = targetDao._queryDbGroupVo_GroupSettingList(groupId);
            synchronized (this) {
                if(groupSettingList == null) {
                    groupSettingList = groupSettingListNew;
                }
            }
        }
        return groupSettingList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroupSettingList() {
        groupSettingList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

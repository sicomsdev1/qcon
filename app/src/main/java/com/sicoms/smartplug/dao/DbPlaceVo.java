package com.sicoms.smartplug.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_place.
 */
public class DbPlaceVo {

    private String placeId;
    /** Not-null value. */
    private String placeName;
    private String placeImg;
    private String address;
    private String coordinate;
    private String auth;
    private Integer plugCount;
    private Integer memberCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbPlaceVoDao myDao;

    private List<DbGroupVo> groupList;
    private List<DbPlaceSettingVo> placeSettingList;
    private List<DbUserVo> userList;
    private List<DbPlugVo> plugList;

    public DbPlaceVo() {
    }

    public DbPlaceVo(String placeId) {
        this.placeId = placeId;
    }

    public DbPlaceVo(String placeId, String placeName, String placeImg, String address, String coordinate, String auth, Integer plugCount, Integer memberCount) {
        this.placeId = placeId;
        this.placeName = placeName;
        this.placeImg = placeImg;
        this.address = address;
        this.coordinate = coordinate;
        this.auth = auth;
        this.plugCount = plugCount;
        this.memberCount = memberCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbPlaceVoDao() : null;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    /** Not-null value. */
    public String getPlaceName() {
        return placeName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlaceName(String placeName) {
        this.placeName = placeName;
    }

    public String getPlaceImg() {
        return placeImg;
    }

    public void setPlaceImg(String placeImg) {
        this.placeImg = placeImg;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getCoordinate() {
        return coordinate;
    }

    public void setCoordinate(String coordinate) {
        this.coordinate = coordinate;
    }

    public String getAuth() {
        return auth;
    }

    public void setAuth(String auth) {
        this.auth = auth;
    }

    public Integer getPlugCount() {
        return plugCount;
    }

    public void setPlugCount(Integer plugCount) {
        this.plugCount = plugCount;
    }

    public Integer getMemberCount() {
        return memberCount;
    }

    public void setMemberCount(Integer memberCount) {
        this.memberCount = memberCount;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbGroupVo> getGroupList() {
        if (groupList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbGroupVoDao targetDao = daoSession.getDbGroupVoDao();
            List<DbGroupVo> groupListNew = targetDao._queryDbPlaceVo_GroupList(placeId);
            synchronized (this) {
                if(groupList == null) {
                    groupList = groupListNew;
                }
            }
        }
        return groupList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroupList() {
        groupList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbPlaceSettingVo> getPlaceSettingList() {
        if (placeSettingList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlaceSettingVoDao targetDao = daoSession.getDbPlaceSettingVoDao();
            List<DbPlaceSettingVo> placeSettingListNew = targetDao._queryDbPlaceVo_PlaceSettingList(placeId);
            synchronized (this) {
                if(placeSettingList == null) {
                    placeSettingList = placeSettingListNew;
                }
            }
        }
        return placeSettingList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlaceSettingList() {
        placeSettingList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbUserVo> getUserList() {
        if (userList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbUserVoDao targetDao = daoSession.getDbUserVoDao();
            List<DbUserVo> userListNew = targetDao._queryDbPlaceVo_UserList(placeId);
            synchronized (this) {
                if(userList == null) {
                    userList = userListNew;
                }
            }
        }
        return userList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserList() {
        userList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbPlugVo> getPlugList() {
        if (plugList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlugVoDao targetDao = daoSession.getDbPlugVoDao();
            List<DbPlugVo> plugListNew = targetDao._queryDbPlaceVo_PlugList(placeId);
            synchronized (this) {
                if(plugList == null) {
                    plugList = plugListNew;
                }
            }
        }
        return plugList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlugList() {
        plugList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

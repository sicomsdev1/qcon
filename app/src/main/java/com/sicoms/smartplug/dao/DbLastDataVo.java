package com.sicoms.smartplug.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_last_data.
 */
public class DbLastDataVo {

    private String plugId;
    private java.util.Date recTime;
    private Float wh;
    private Float w;
    private String onOff;
    private String ledOnOff;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbLastDataVoDao myDao;

    private DbPlugVo dbPlugVo;
    private String dbPlugVo__resolvedKey;


    public DbLastDataVo() {
    }

    public DbLastDataVo(String plugId) {
        this.plugId = plugId;
    }

    public DbLastDataVo(String plugId, java.util.Date recTime, Float wh, Float w, String onOff, String ledOnOff) {
        this.plugId = plugId;
        this.recTime = recTime;
        this.wh = wh;
        this.w = w;
        this.onOff = onOff;
        this.ledOnOff = ledOnOff;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbLastDataVoDao() : null;
    }

    public String getPlugId() {
        return plugId;
    }

    public void setPlugId(String plugId) {
        this.plugId = plugId;
    }

    public java.util.Date getRecTime() {
        return recTime;
    }

    public void setRecTime(java.util.Date recTime) {
        this.recTime = recTime;
    }

    public Float getWh() {
        return wh;
    }

    public void setWh(Float wh) {
        this.wh = wh;
    }

    public Float getW() {
        return w;
    }

    public void setW(Float w) {
        this.w = w;
    }

    public String getOnOff() {
        return onOff;
    }

    public void setOnOff(String onOff) {
        this.onOff = onOff;
    }

    public String getLedOnOff() {
        return ledOnOff;
    }

    public void setLedOnOff(String ledOnOff) {
        this.ledOnOff = ledOnOff;
    }

    /** To-one relationship, resolved on first access. */
    public DbPlugVo getDbPlugVo() {
        String __key = this.plugId;
        if (dbPlugVo__resolvedKey == null || dbPlugVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlugVoDao targetDao = daoSession.getDbPlugVoDao();
            DbPlugVo dbPlugVoNew = targetDao.load(__key);
            synchronized (this) {
                dbPlugVo = dbPlugVoNew;
            	dbPlugVo__resolvedKey = __key;
            }
        }
        return dbPlugVo;
    }

    public void setDbPlugVo(DbPlugVo dbPlugVo) {
        synchronized (this) {
            this.dbPlugVo = dbPlugVo;
            plugId = dbPlugVo == null ? null : dbPlugVo.getPlugId();
            dbPlugVo__resolvedKey = plugId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

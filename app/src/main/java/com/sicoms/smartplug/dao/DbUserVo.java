package com.sicoms.smartplug.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_user.
 */
public class DbUserVo {

    private String placeId;
    private String userId;
    /** Not-null value. */
    private String userName;
    private String profileImg;
    private int auth;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbUserVoDao myDao;

    private DbPlaceVo dbPlaceVo;
    private String dbPlaceVo__resolvedKey;


    public DbUserVo() {
    }

    public DbUserVo(String userId) {
        this.userId = userId;
    }

    public DbUserVo(String placeId, String userId, String userName, String profileImg, int auth) {
        this.placeId = placeId;
        this.userId = userId;
        this.userName = userName;
        this.profileImg = profileImg;
        this.auth = auth;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbUserVoDao() : null;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    /** Not-null value. */
    public String getUserName() {
        return userName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getProfileImg() {
        return profileImg;
    }

    public void setProfileImg(String profileImg) {
        this.profileImg = profileImg;
    }

    public int getAuth() {
        return auth;
    }

    public void setAuth(int auth) {
        this.auth = auth;
    }

    /** To-one relationship, resolved on first access. */
    public DbPlaceVo getDbPlaceVo() {
        String __key = this.placeId;
        if (dbPlaceVo__resolvedKey == null || dbPlaceVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlaceVoDao targetDao = daoSession.getDbPlaceVoDao();
            DbPlaceVo dbPlaceVoNew = targetDao.load(__key);
            synchronized (this) {
                dbPlaceVo = dbPlaceVoNew;
            	dbPlaceVo__resolvedKey = __key;
            }
        }
        return dbPlaceVo;
    }

    public void setDbPlaceVo(DbPlaceVo dbPlaceVo) {
        synchronized (this) {
            this.dbPlaceVo = dbPlaceVo;
            placeId = dbPlaceVo == null ? null : dbPlaceVo.getPlaceId();
            dbPlaceVo__resolvedKey = placeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

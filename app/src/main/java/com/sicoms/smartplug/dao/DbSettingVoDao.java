package com.sicoms.smartplug.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_setting.
*/
public class DbSettingVoDao extends AbstractDao<DbSettingVo, String> {

    public static final String TABLENAME = "tb_setting";

    /**
     * Properties of entity DbSettingVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SetId = new Property(0, String.class, "setId", true, "SET_ID");
        public final static Property SetVal = new Property(1, String.class, "setVal", false, "SET_VAL");
    }


    public DbSettingVoDao(DaoConfig config) {
        super(config);
    }
    
    public DbSettingVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_setting' (" + //
                "'SET_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: setId
                "'SET_VAL' TEXT NOT NULL );"); // 1: setVal
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_setting'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbSettingVo entity) {
        stmt.clearBindings();
 
        String setId = entity.getSetId();
        if (setId != null) {
            stmt.bindString(1, setId);
        }
        stmt.bindString(2, entity.getSetVal());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbSettingVo readEntity(Cursor cursor, int offset) {
        DbSettingVo entity = new DbSettingVo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // setId
            cursor.getString(offset + 1) // setVal
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbSettingVo entity, int offset) {
        entity.setSetId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSetVal(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbSettingVo entity, long rowId) {
        return entity.getSetId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbSettingVo entity) {
        if(entity != null) {
            return entity.getSetId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

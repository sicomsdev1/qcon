package com.sicoms.smartplug.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_place_setting.
*/
public class DbPlaceSettingVoDao extends AbstractDao<DbPlaceSettingVo, Long> {

    public static final String TABLENAME = "tb_place_setting";

    /**
     * Properties of entity DbPlaceSettingVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlaceId = new Property(1, String.class, "placeId", false, "PLACE_ID");
        public final static Property SetId = new Property(2, String.class, "setId", false, "SET_ID");
        public final static Property SetVal = new Property(3, String.class, "setVal", false, "SET_VAL");
    }

    private DaoSession daoSession;

    private Query<DbPlaceSettingVo> dbPlaceVo_PlaceSettingListQuery;

    public DbPlaceSettingVoDao(DaoConfig config) {
        super(config);
    }
    
    public DbPlaceSettingVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_place_setting' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PLACE_ID' TEXT NOT NULL ," + // 1: placeId
                "'SET_ID' TEXT NOT NULL ," + // 2: setId
                "'SET_VAL' TEXT NOT NULL );"); // 3: setVal
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tb_place_setting_PLACE_ID_SET_ID ON tb_place_setting" +
                " (PLACE_ID,SET_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_place_setting'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbPlaceSettingVo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPlaceId());
        stmt.bindString(3, entity.getSetId());
        stmt.bindString(4, entity.getSetVal());
    }

    @Override
    protected void attachEntity(DbPlaceSettingVo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbPlaceSettingVo readEntity(Cursor cursor, int offset) {
        DbPlaceSettingVo entity = new DbPlaceSettingVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // placeId
            cursor.getString(offset + 2), // setId
            cursor.getString(offset + 3) // setVal
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbPlaceSettingVo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlaceId(cursor.getString(offset + 1));
        entity.setSetId(cursor.getString(offset + 2));
        entity.setSetVal(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbPlaceSettingVo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbPlaceSettingVo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "placeSettingList" to-many relationship of DbPlaceVo. */
    public List<DbPlaceSettingVo> _queryDbPlaceVo_PlaceSettingList(String placeId) {
        synchronized (this) {
            if (dbPlaceVo_PlaceSettingListQuery == null) {
                QueryBuilder<DbPlaceSettingVo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlaceId.eq(null));
                dbPlaceVo_PlaceSettingListQuery = queryBuilder.build();
            }
        }
        Query<DbPlaceSettingVo> query = dbPlaceVo_PlaceSettingListQuery.forCurrentThread();
        query.setParameter(0, placeId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbPlaceVoDao().getAllColumns());
            builder.append(" FROM tb_place_setting T");
            builder.append(" LEFT JOIN tb_place T0 ON T.'PLACE_ID'=T0.'PLACE_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbPlaceSettingVo loadCurrentDeep(Cursor cursor, boolean lock) {
        DbPlaceSettingVo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbPlaceVo dbPlaceVo = loadCurrentOther(daoSession.getDbPlaceVoDao(), cursor, offset);
         if(dbPlaceVo != null) {
            entity.setDbPlaceVo(dbPlaceVo);
        }

        return entity;    
    }

    public DbPlaceSettingVo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbPlaceSettingVo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbPlaceSettingVo> list = new ArrayList<DbPlaceSettingVo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbPlaceSettingVo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbPlaceSettingVo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

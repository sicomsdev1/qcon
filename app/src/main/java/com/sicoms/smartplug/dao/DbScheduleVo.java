package com.sicoms.smartplug.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_schedule.
 */
public class DbScheduleVo {

    /** Not-null value. */
    private String plugId;
    private Long schSeq;
    /** Not-null value. */
    private String startTime;
    /** Not-null value. */
    private String endTime;
    /** Not-null value. */
    private String startUseYn;
    /** Not-null value. */
    private String endUseYn;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbScheduleVoDao myDao;

    private DbPlugVo dbPlugVo;
    private String dbPlugVo__resolvedKey;


    public DbScheduleVo() {
    }

    public DbScheduleVo(Long schSeq) {
        this.schSeq = schSeq;
    }

    public DbScheduleVo(String plugId, Long schSeq, String startTime, String endTime, String startUseYn, String endUseYn) {
        this.plugId = plugId;
        this.schSeq = schSeq;
        this.startTime = startTime;
        this.endTime = endTime;
        this.startUseYn = startUseYn;
        this.endUseYn = endUseYn;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbScheduleVoDao() : null;
    }

    /** Not-null value. */
    public String getPlugId() {
        return plugId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlugId(String plugId) {
        this.plugId = plugId;
    }

    public Long getSchSeq() {
        return schSeq;
    }

    public void setSchSeq(Long schSeq) {
        this.schSeq = schSeq;
    }

    /** Not-null value. */
    public String getStartTime() {
        return startTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    /** Not-null value. */
    public String getEndTime() {
        return endTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    /** Not-null value. */
    public String getStartUseYn() {
        return startUseYn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartUseYn(String startUseYn) {
        this.startUseYn = startUseYn;
    }

    /** Not-null value. */
    public String getEndUseYn() {
        return endUseYn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEndUseYn(String endUseYn) {
        this.endUseYn = endUseYn;
    }

    /** To-one relationship, resolved on first access. */
    public DbPlugVo getDbPlugVo() {
        String __key = this.plugId;
        if (dbPlugVo__resolvedKey == null || dbPlugVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlugVoDao targetDao = daoSession.getDbPlugVoDao();
            DbPlugVo dbPlugVoNew = targetDao.load(__key);
            synchronized (this) {
                dbPlugVo = dbPlugVoNew;
            	dbPlugVo__resolvedKey = __key;
            }
        }
        return dbPlugVo;
    }

    public void setDbPlugVo(DbPlugVo dbPlugVo) {
        if (dbPlugVo == null) {
            throw new DaoException("To-one property 'plugId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbPlugVo = dbPlugVo;
            plugId = dbPlugVo.getPlugId();
            dbPlugVo__resolvedKey = plugId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package com.sicoms.smartplug.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_schedule.
*/
public class DbScheduleVoDao extends AbstractDao<DbScheduleVo, Long> {

    public static final String TABLENAME = "tb_schedule";

    /**
     * Properties of entity DbScheduleVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlugId = new Property(0, String.class, "plugId", false, "PLUG_ID");
        public final static Property SchSeq = new Property(1, Long.class, "schSeq", true, "SCH_SEQ");
        public final static Property StartTime = new Property(2, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, String.class, "endTime", false, "END_TIME");
        public final static Property StartUseYn = new Property(4, String.class, "startUseYn", false, "START_USE_YN");
        public final static Property EndUseYn = new Property(5, String.class, "endUseYn", false, "END_USE_YN");
    }

    private DaoSession daoSession;

    private Query<DbScheduleVo> dbPlugVo_ScheduleListQuery;

    public DbScheduleVoDao(DaoConfig config) {
        super(config);
    }
    
    public DbScheduleVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tb_schedule' (" + //
                "'PLUG_ID' TEXT NOT NULL ," + // 0: plugId
                "'SCH_SEQ' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: schSeq
                "'START_TIME' TEXT NOT NULL ," + // 2: startTime
                "'END_TIME' TEXT NOT NULL ," + // 3: endTime
                "'START_USE_YN' TEXT NOT NULL ," + // 4: startUseYn
                "'END_USE_YN' TEXT NOT NULL );"); // 5: endUseYn
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tb_schedule_PLUG_ID_SCH_SEQ ON tb_schedule" +
                " (PLUG_ID,SCH_SEQ);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tb_schedule'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbScheduleVo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPlugId());
 
        Long schSeq = entity.getSchSeq();
        if (schSeq != null) {
            stmt.bindLong(2, schSeq);
        }
        stmt.bindString(3, entity.getStartTime());
        stmt.bindString(4, entity.getEndTime());
        stmt.bindString(5, entity.getStartUseYn());
        stmt.bindString(6, entity.getEndUseYn());
    }

    @Override
    protected void attachEntity(DbScheduleVo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public DbScheduleVo readEntity(Cursor cursor, int offset) {
        DbScheduleVo entity = new DbScheduleVo( //
            cursor.getString(offset + 0), // plugId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // schSeq
            cursor.getString(offset + 2), // startTime
            cursor.getString(offset + 3), // endTime
            cursor.getString(offset + 4), // startUseYn
            cursor.getString(offset + 5) // endUseYn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbScheduleVo entity, int offset) {
        entity.setPlugId(cursor.getString(offset + 0));
        entity.setSchSeq(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStartTime(cursor.getString(offset + 2));
        entity.setEndTime(cursor.getString(offset + 3));
        entity.setStartUseYn(cursor.getString(offset + 4));
        entity.setEndUseYn(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbScheduleVo entity, long rowId) {
        entity.setSchSeq(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbScheduleVo entity) {
        if(entity != null) {
            return entity.getSchSeq();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "scheduleList" to-many relationship of DbPlugVo. */
    public List<DbScheduleVo> _queryDbPlugVo_ScheduleList(String plugId) {
        synchronized (this) {
            if (dbPlugVo_ScheduleListQuery == null) {
                QueryBuilder<DbScheduleVo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlugId.eq(null));
                dbPlugVo_ScheduleListQuery = queryBuilder.build();
            }
        }
        Query<DbScheduleVo> query = dbPlugVo_ScheduleListQuery.forCurrentThread();
        query.setParameter(0, plugId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbPlugVoDao().getAllColumns());
            builder.append(" FROM tb_schedule T");
            builder.append(" LEFT JOIN tb_plug T0 ON T.'PLUG_ID'=T0.'PLUG_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbScheduleVo loadCurrentDeep(Cursor cursor, boolean lock) {
        DbScheduleVo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbPlugVo dbPlugVo = loadCurrentOther(daoSession.getDbPlugVoDao(), cursor, offset);
         if(dbPlugVo != null) {
            entity.setDbPlugVo(dbPlugVo);
        }

        return entity;    
    }

    public DbScheduleVo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbScheduleVo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbScheduleVo> list = new ArrayList<DbScheduleVo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbScheduleVo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbScheduleVo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

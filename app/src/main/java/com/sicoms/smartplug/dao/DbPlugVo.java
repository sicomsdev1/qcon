package com.sicoms.smartplug.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table tb_plug.
 */
public class DbPlugVo {

    private String placeId;
    private String plugId;
    /** Not-null value. */
    private String plugName;
    private String plugType;
    private String plugImg;
    private String bssId;
    private String routerIp;
    private String gatewayIp;
    private String uuid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbPlugVoDao myDao;

    private DbPlaceVo dbPlaceVo;
    private String dbPlaceVo__resolvedKey;

    private DbLastDataVo dbLastDataVo;
    private String dbLastDataVo__resolvedKey;

    private List<DbCutOffVo> cutOffList;
    private List<DbScheduleVo> scheduleList;

    public DbPlugVo() {
    }

    public DbPlugVo(String plugId) {
        this.plugId = plugId;
    }

    public DbPlugVo(String placeId, String plugId, String plugName, String plugType, String plugImg, String bssId, String routerIp, String gatewayIp, String uuid) {
        this.placeId = placeId;
        this.plugId = plugId;
        this.plugName = plugName;
        this.plugType = plugType;
        this.plugImg = plugImg;
        this.bssId = bssId;
        this.routerIp = routerIp;
        this.gatewayIp = gatewayIp;
        this.uuid = uuid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbPlugVoDao() : null;
    }

    public String getPlaceId() {
        return placeId;
    }

    public void setPlaceId(String placeId) {
        this.placeId = placeId;
    }

    public String getPlugId() {
        return plugId;
    }

    public void setPlugId(String plugId) {
        this.plugId = plugId;
    }

    /** Not-null value. */
    public String getPlugName() {
        return plugName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlugName(String plugName) {
        this.plugName = plugName;
    }

    public String getPlugType() {
        return plugType;
    }

    public void setPlugType(String plugType) {
        this.plugType = plugType;
    }

    public String getPlugImg() {
        return plugImg;
    }

    public void setPlugImg(String plugImg) {
        this.plugImg = plugImg;
    }

    public String getBssId() {
        return bssId;
    }

    public void setBssId(String bssId) {
        this.bssId = bssId;
    }

    public String getRouterIp() {
        return routerIp;
    }

    public void setRouterIp(String routerIp) {
        this.routerIp = routerIp;
    }

    public String getGatewayIp() {
        return gatewayIp;
    }

    public void setGatewayIp(String gatewayIp) {
        this.gatewayIp = gatewayIp;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /** To-one relationship, resolved on first access. */
    public DbPlaceVo getDbPlaceVo() {
        String __key = this.placeId;
        if (dbPlaceVo__resolvedKey == null || dbPlaceVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbPlaceVoDao targetDao = daoSession.getDbPlaceVoDao();
            DbPlaceVo dbPlaceVoNew = targetDao.load(__key);
            synchronized (this) {
                dbPlaceVo = dbPlaceVoNew;
            	dbPlaceVo__resolvedKey = __key;
            }
        }
        return dbPlaceVo;
    }

    public void setDbPlaceVo(DbPlaceVo dbPlaceVo) {
        synchronized (this) {
            this.dbPlaceVo = dbPlaceVo;
            placeId = dbPlaceVo == null ? null : dbPlaceVo.getPlaceId();
            dbPlaceVo__resolvedKey = placeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public DbLastDataVo getDbLastDataVo() {
        String __key = this.plugId;
        if (dbLastDataVo__resolvedKey == null || dbLastDataVo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbLastDataVoDao targetDao = daoSession.getDbLastDataVoDao();
            DbLastDataVo dbLastDataVoNew = targetDao.load(__key);
            synchronized (this) {
                dbLastDataVo = dbLastDataVoNew;
            	dbLastDataVo__resolvedKey = __key;
            }
        }
        return dbLastDataVo;
    }

    public void setDbLastDataVo(DbLastDataVo dbLastDataVo) {
        synchronized (this) {
            this.dbLastDataVo = dbLastDataVo;
            plugId = dbLastDataVo == null ? null : dbLastDataVo.getPlugId();
            dbLastDataVo__resolvedKey = plugId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbCutOffVo> getCutOffList() {
        if (cutOffList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbCutOffVoDao targetDao = daoSession.getDbCutOffVoDao();
            List<DbCutOffVo> cutOffListNew = targetDao._queryDbPlugVo_CutOffList(plugId);
            synchronized (this) {
                if(cutOffList == null) {
                    cutOffList = cutOffListNew;
                }
            }
        }
        return cutOffList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCutOffList() {
        cutOffList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbScheduleVo> getScheduleList() {
        if (scheduleList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbScheduleVoDao targetDao = daoSession.getDbScheduleVoDao();
            List<DbScheduleVo> scheduleListNew = targetDao._queryDbPlugVo_ScheduleList(plugId);
            synchronized (this) {
                if(scheduleList == null) {
                    scheduleList = scheduleListNew;
                }
            }
        }
        return scheduleList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetScheduleList() {
        scheduleList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
